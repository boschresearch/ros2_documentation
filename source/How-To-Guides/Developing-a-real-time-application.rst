Developing a real-time application
##########################

.. contents:: Table of Contents
   :depth: 2
   :local:

This How-To-Guide gives an overview how to develop a real-time applications. Several steps are necessary.

Real-Time Linux
---------------
`Real-Time Linux <https://wiki.linuxfoundation.org/realtime/start>`_, aka (using the PREEMPT_RT kernel patch) has been in the making for long time and has been `merged in mainline Linux 5.15 <https://lwn.net/Articles/867919/>`_. This patch reduces the context switch costs in the Linux scheduler. They are being analyzed for various architectures by the `OSADL organization <https://www.osadl.org/OSADL-QA-Farm-Real-time.linux-real-time.0.html>`_. 


- `Tutorial, how to install real-time Linux <https://docs.ros.org/en/rolling/Tutorials/Building-Realtime-rt_preempt-kernel-for-ROS-2.html>`_
- `Tutorial, how to build real-time Linux for Raspberry Pi4 <https://github.com/ros-realtime/linux-real-time-kernel-builder>`_
- `Image for Raspberry Pi4 with real-time Linux <https://github.com/ros-realtime/ros-realtime-rpi4-image>`_
- `Further documenation for ROS 2 on QNX and VxWorks <https://ros-realtime.github.io/Guides/Real-Time-Operating-System-Setup/rtos_setup.html>`_


Latency histograms of the scheduler of real-time Linux can be generated by the tool `cyclictest by OSADL <https://www.osadl.org/Create-a-latency-plot-from-cyclictest-hi.bash-script-for-latency-plot.0.html>`_



Thread priorities
------------------
A first step towards real-time is assigning a real-time priority to importnant threads with the Linux API ``sched_setscheduler``. You can use different processes or multiple threads within a process and then assign a real-time Linux prioroty to it. Each thread can have a ROS node and it's own scheduler. So all functions in the respective callbacks (times, subscriptions for example) are then processed with a real-time priority. Be careful not to use a higher priority then kernel threads as this would have an impact on the performance of other kernel drivers. 

.. code-block:: cpp

  struct sched_param sched_param = { 0 };
  sched_param.sched_priority = prio;
  sched_setscheduler(0, SCHED_FIFO, &sched_param);

- `Example to assign real-time priority in reference system <https://github.com/ros-realtime/reference-system/blob/main/autoware_reference_system/src/ros2/executor/autoware_default_prioritized.cpp>`_

ROS 2 Executors
------------------
At ROSWorld 2021, a `reference-system <https://github.com/ros-realtime/reference-system>`_ was setup, to compare the performance of different Executors. You will find there complete code examples for 
- single threaded executor
- static single threaded executor
- multi-threaded executor
- single threaded executor but with prioritized threads
- callback group level executor 
- events executor 
- Picas executor 
- rclc executor 


Concept Overview of ROS 2 Executors
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- `Executor Concepts  <https://docs.ros.org/en/rolling/Concepts/About-Executors.html>`_


Multi-threaded Executor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

  rclcpp::executors::MultiThreadedExecutor executor;
  for (auto & node : nodes) {
    executor.add_node(node);
  }
  executor.spin();


- `Multi-Threaded Executor Example in Reference System <https://github.com/ros-realtime/reference-system/blob/main/autoware_reference_system/src/ros2/executor/autoware_default_multithreaded.cpp>`_

Callback-Grouplevel Executor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- `Callback Grouplevel Executor in Reference System <https://github.com/ros-realtime/reference-system/blob/main/autoware_reference_system/src/ros2/executor/autoware_default_cbg.cpp>`_
- `Example Callback Grouplevel Executor <https://github.com/ros2/examples/blob/master/rclcpp/executors/cbg_executor/src/examples_rclcpp_cbg_executor/pong_node.cpp>`_


Events Executor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- `Events Executor Presentation at ROS World 2021 <https://www.youtube.com/watch?v=cKH0k6bPHHw>`_ `download slides <https://ec2a4d36-bac8-4759-b25e-bb1f794177f4.filesusr.com/ugd/984e93_da50a92943a6423bafcc4db22ff425ce.pptx?dn=ROSWorld2021-EventsExecutor-Alberto%20Soragna.pptx>`_

ROS 2 tracing
-------------
- `How to use ros2_tracing to trace and analyze an application <https://ros-realtime.github.io/Guides/ros2_tracing_trace_and_analyze.html>`_
- `Video Tutorial about ros2_tracing <https://vimeo.com/652633418>`_

